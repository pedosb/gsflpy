import sys

import weka.core.Instances as Instances

import java.io.FileInputStream as FileInputStream
import java.io.ObjectInputStream as ObjectInputStream

class ConsoleOptions(object):
   def __init__(self,
	 args,
	 usage = None):
      self.args = args
      self.read = len(args)*[False]
      self.user_usage = usage

   def get_option(self, option):
      try:
	 option_index = self.args.index('-'+option)
      except ValueError:
	 if option == 'L':
	    return None, None, None
	 if option == 'm':
	    return None, None

      self.read[option_index] = True
      #Retrun a tuple with the lists:
      #lat_file_name, max_node, correct_sentence
      if option == 'L':
	 input_file_name = self.get_arg(option_index+1)
	 LAT_FILE = []
	 MAX_NODE = []
	 CORRECT_SENTENCE = []
	 for line in open(input_file_name):
	    try:
	       words = line.split()
	       LAT_FILE.append(words[0])
	       MAX_NODE.append(words[1])
	       sentence = ""
	       for word in words[2:len(words)]:
		  sentence += word + ' '
	       CORRECT_SENTENCE.append(sentence.strip())
	    except:
	       print 'ERROR: Cannot read lattice list file. Maybe syntax error.'
	       #TODO make it better
	       sys.exit(-1)
	 return LAT_FILE, MAX_NODE, CORRECT_SENTENCE
      #Retun a tuple of weka classifier and instances (generated by the model file to
      #compare test attributes)
      if option == 'm':
	 model_file_name = self.get_arg(option_index+1)
	 object_input_stream = ObjectInputStream(FileInputStream(model_file_name))
	 classifier = object_input_stream.readObject()
	 classifier_instances = Instances(object_input_stream.readObject())
	 object_input_stream.close()
	 return classifier, classifier_instances

   def get_arg(self, index):
      try:
	 arg = self.args[index]
	 if not arg.startswith('-'):
	    self.read[index] = True
	    return arg
      except IndexError:
	 pass
      self.usage(self.argv[index-1] + 
	    ' needs an argument.')

   def usage(self,
	 message = None):
      print message,'\n'
      print 'Usage:'
      print (self.args[0] + '-L <lattice_and_transcription_file_path>' +
	    ' -m <weka_classifier_model>')
      print ('  -L: File that contains the path for lattice file (whithout spaces)' +
	    'followed by the number of max words and then correct transcription (one per line).')
      print '  -m: Model of a classifier trainned by weka.'
      if self.user_usage:
	 self.user_usage()
      sys.exit(-1)
